// 这段代码的作用是将文件描述符 `fd` 的 `FD_CLOEXEC` 标志设置为 1，
// 表示在执行 `exec` 系列函数时自动关闭该文件描述符。

// 在 Linux 中，当一个进程调用 `exec` 系列函数时，
// 会将当前进程的地址空间替换为新程序的地址空间，并重新启动新程序。
// 在这个过程中，原来的文件描述符会被继承到新程序中。
// 如果某个文件描述符在新程序中没有被使用，但在原来的程序中仍然打开着，
// 这可能会导致一些安全问题，例如文件泄露、资源浪费等。

// 为了避免这个问题，可以在打开文件描述符时设置 `FD_CLOEXEC` 标志。
// 这个标志表示在执行 `exec` 系列函数时自动关闭该文件描述符，避免文件泄露和资源浪费。
// 在这段代码中，使用 `util::addFdFlag` 函数将 `FD_CLOEXEC` 标志添加到
// 文件描述符 `fd` 中，保证在执行 `exec` 系列函数时自动关闭该文件描述符。

// Todo: 实验验证怎样导致文件泄露和资源浪费

// Todo: #define 多行时使用 空循环 `do {} while(0)` 的作用

// Todo: 非阻塞和阻塞socket的区别实验

// Todo: 时间相关的 chrono 库的使用


// TODO: "recv msg: %.*s", (int) msg.size(), msg.data() 为什么可以动态指定字符串的长度